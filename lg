#!/bin/bash
SRC="http://github.com/ezdiy/luagit.git"
if [ -z "$LG_DEBUG" ]; then
	BASE=~/dev/.luagit
else
	BASE=`pwd`
fi
MYSELF=$(readlink -f $0)
REPO=$BASE/repo
LIB=$BASE/lib
TMP=/tmp/$$/
CPPFLAGS='-I/usr/include/lua5.1 -I.'
CFLAGS='-O2 -I/usr/include/lua5.1 -I.'

if [ "$MYSELF" != "$BASE/lg" ] && [ -z "$LG_DEBUG" ]; then
	if [ ! -f "$BASE/lg" ]; then
		echo "Attempting to fetch copy of LuaGIT into $BASE..."
		if [ ! -f "$BASE/lg" ]; then
			git clone $SRC $BASE || exit 1
		fi
	fi
	echo "Running from $MYSELF, handing control over to $BASE/lg..."
	exec "$BASE/lg" $*
fi
cd "$BASE"
mkdir -p $TMP

function get_ver()
{
	wd=`pwd`
	cd "$BASE/repo/$1"
	vh=`git log -n1 --pretty=format:%h%d`
	vn=`git log --pretty=format:%h%d | wc -l`
	cd "$wd"
	echo "v$vn-git$vh"
}

echo "------------------------------------------------------------------------"
echo " LuaGIT: `get_ver`"
echo "   repo: $SRC"
echo "------------------------------------------------------------------------"

function go()
{
	#echo "$*"
	$*
}

function do_install()
{
	pkname="$1"
	echo "Installing '$pkname'..."
	function do_configure()
	{
		wd=`pwd`
		cd $BASE/repo/$pkname
		if [ ! -f configure ]; then
			./bootstrap
		fi
		if [ ! -f config.h ]; then
			# XXX todo, what about others than debian/ubuntu?
			CPPFLAGS='-I/usr/include/lua5.1' ./configure --libdir=/usr/local/lib/lua/5.1 --datadir=/usr/local/share/lua/5.1 --with-lua-suffix=5.1
		fi
		cd $wd
	}
	function do_make()
	{
		wd=`pwd`
		cd $wd
	}
	function import_all()
	{
		go cp -af $* $LIB
	}
	function depend() { return; }
	function source() { return; }
	function summary() { return; }
	function detail() { return; }
	function homepage() { return; }
	function license() { return; }
	function import()
	{
		file="$2"
		ext=${file##*.} 
		fl=`echo "$1" | sed -e 's#\.#/#g'`
		if [ "$ext" == "lua" ]; then
			mkdir -p `dirname "$LIB/$fl"`
			go cp -f "$file" "$LIB/$fl.lua"
		elif [ "$ext" == "so" ]; then
			mkdir -p `dirname "$LIB/$fl"`
			go cp -f "$file" "$LIB/$fl.$ext"
		elif [ "$ext" == "c" ]; then
			shift
			all=""
			for fn in $*; do
				fo="${fn%.*}.o"
				go gcc -fPIC -O2 $CFLAGS -c "$fn" -o "$fo"
				all="$fo $all"
			done
			mkdir -p `dirname "$LIB/$fl"`
			go gcc -shared -fpic $all -o "$LIB/$fl.so" $LDFLAGS
		fi
	}
	cd $REPO/$1
	. $BASE/spec/$1
}

function get_uniq()
{
	echo "$*" | tr " " "\n" | sort | uniq
}

function do_depend()
{
	function depend()
	{
		echo $1
	}
	. $BASE/spec/$1 2> /dev/null
}

function do_update()
{
	INPUT=""
	TODO=""
	function source()
	{
		DIR=`basename $INPUT`
		if [ ! -d "$REPO/$DIR" ]; then
			(git clone $1 $REPO/$DIR > /dev/null; echo -n "#")&
		else
			(cd $REPO/$DIR; git pull > /dev/null; echo -n "#")&
		fi
	}

	echo "Updating packages"
	echo -n "["
	for n in $BASE/spec/*; do echo -n .; done
	echo -ne "]\r["

	for n in $BASE/spec/*; do
		INPUT=$n
		. $n 2> /dev/null
	done
	wait
	echo "] OK!"
}

case $1 in
	"update")
		echo -n "Updating LuaGIT.."
		cd $BASE && git pull
		do_update
		;;
	"install")
		shift
		pkglist="$*"
		if [ -z "$pkglist" ]; then
			echo -n "No package name(s) given, really install all `echo $BASE/spec/*|wc -w` packages? [y/N]"
			read -n 1 resp
			echo $resp
			if [ "$resp" != "y" ]; then
				return
			fi
			for n in $BASE/spec/*; do
				do_install `basename $n`
			done
		else
			deps=`(for pkg in $pkglist; do do_depend $pkg; done)`
			for n in `get_uniq "$pkglist $deps"`; do
				do_install "$n"
			done
		fi
		;;
	"list")
		echo "List of installed packages"
		for n in $BASE/sentinel/*; do
			pn=`basename $n`
			iver=`get_ver $n`
			cver=`get_ver $BASE/repo/$pn`
			if [ "$cver" != "$iver" ]; then
				echo " $pn $iver, newest is $cver"
			else
				echo " $pn $iver"
			fi
		done
		;;
	*)
		if [ ! -z "$1" ]; then
			echo "Unknown command '$1'"
		fi
cat<<_eof
Valid commands:
	update	Update LuaGIT and package source code database
	install [pkgname] [pkgname...]
		Install package(s)
	upgrade [pkgname] [pkgname...]
		Upgrade package(s) to newer version
	list	List installed packages
_eof
		exit 1
		;;
esac

rm -rf $TMP
